
R : Copyright 2005, The R Foundation for Statistical Computing
Version 2.2.0  (2005-10-06 r35749)
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for a HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> invisible(options(echo = TRUE))
> #############################################################################
> # Author JP BIDA
> # Date 6/5/2008
> # This R Code takes the output from a fks using the -O 2 option and creates 
> # a gri file that can be used to generate a series of 3D images for the 
> # creation of a debuging video.
> # 
> # Parameters:
> # size - selects the position of the images in the simulated space
> # 	the images will be of the box {[0,size],[0,size],[0,size]}
> # time - How many time steps would you like to render
> # type - A vector of molecule types that should be shown
> # 	type=c(0,1,2) keeps A,B,C and boundaries
> # 	type=c(0,1) gets rid of boundaries
> # file - Input generated by FKS simulator
> #############################################################################
> file<-"tmp"
> size<-25
> time<-100
> type<-c(0,1)
> # FKS input is comma separated with the following columns #
> #1) time
> #2) molecule id
> #3) x
> #4) y
> #5) z
> #6) isMain
> #7) isBound
> #8) id of bound molecule
> #9) radius
> #10) number of molecules in verley list
> #11) Molecule Type
> #12-22) verley ids of first 0-11
> print("Reading File")
[1] "Reading File"
> dat<-read.table(file=file,sep=",")
> print("complete")
[1] "complete"
> pdat<-dat[c(1,3,4,5,9,11,2)]
> names(pdat)<-c("time","x","y","z","r","type","id")
> pdat<-as.data.frame(pdat)
> keep<-pdat$type==type[1]
> if(length(type)>1){
+ for(i in 2:length(type)){
+ keep<- keep | pdat$type==type[i]
+ }
+ }
> keep<-keep & pdat$time < time
> pdat<-pdat[keep,]
> 
> t1<-0
>  out<-paste(
+ "set pm3d explicit",
+ "set palette rgb 9,9,2",
+ "set xrange [0:25]",
+ "set yrange [0:25]",
+ "set zrange [0:25]",
+ "unset colorbox",
+ "set nokey",
+ "set nohidden3d",
+ "set surface",
+ "set parametric",
+ "set size square",
+ "set samples 36",
+ "set isosamples 15,15",
+ "set ticslevel 0",
+ "set view 70,170,1.1,1",
+ "set urange [0:pi]",
+ "set vrange [0:2* pi]",
+ "set term png\n",sep="\n")
>        	out<-paste(out,'set out "sim',t1,'.png"',"\nset multiplot",sep="")
>  for(i in 1:dim(pdat)[1]){
+ 	 if((pdat$time[i]+1)==t1){
+ 	 }else{
+ 	
+ 	 t1=pdat$time[i]+1
+  out<-paste(out,'\nunset multiplot\nset out "sim',t1,'.png"',"\nset multiplot",sep="")
+ 	 }
+ 		 if(pdat$id[i] > 5 & pdat$x[i] < size & pdat$y[i] < size & pdat$z[i] < size){
+ out<-paste(out,"\nsplot ",pdat$r[i],"*sin(u)*cos(v) + ",pdat$x[i],",",pdat$r[i],"*sin(u)*sin(v) + ",pdat$y[i],",",pdat$r[i],"*cos(u)+",pdat$z[i]," lt ",(pdat$type[i]+3),sep="")
+ 		 }		
+ 
+  }
> write(out,file="tp.g")
> 
> proc.time()
[1] 184.11   8.35 244.62   0.00   0.01
> 
